//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.DataAccessGateway.Automation.DAGUnitTest
{
	using System;
	using System.Data;
	using System.Linq;
	using System.Collections.Generic;
	using Framework.DataAccessGateway.Core;
	using Framework.AssetLibrary.Types;
	
	
	public partial interface Isysdiagrams_Repository
	{
		
		void sysdiagramsInsert(sysdiagrams model);
		
		void sysdiagramsUpdate(sysdiagrams_Ext model);
		
		void sysdiagramsDeleteByKey(sysdiagrams_Key model);
		
		sysdiagrams sysdiagramsGetByKey(sysdiagrams_Key model);
		
		IList<sysdiagrams> sysdiagramsGetAll();
		
		void sysdiagramsUDTTInsert(IList<sysdiagrams> models);
		
		void sysdiagramsUDTTUpdate(IList<sysdiagrams> models);
	}
	
	internal partial class sysdiagrams_Repository : Isysdiagrams_Repository
	{
		
		private Framework.DataAccessGateway.Core.IDBHandler _DBHandler { get; }
		
		public sysdiagrams_Repository(Framework.DataAccessGateway.Core.IDBHandler dbHandler)
		{
			_DBHandler = dbHandler;
			Initialize();
		}
		
		public virtual void sysdiagramsInsert(sysdiagrams model)
		{
			_DBHandler.ExecuteNonQuery("_sysdiagramsInsert", model, CommandType.StoredProcedure);;
		}
		
		public virtual void sysdiagramsUpdate(sysdiagrams_Ext model)
		{
			_DBHandler.ExecuteNonQuery("_sysdiagramsUpdate", model, CommandType.StoredProcedure);;
		}
		
		public virtual void sysdiagramsDeleteByKey(sysdiagrams_Key model)
		{
			_DBHandler.ExecuteNonQuery("_sysdiagramsDeleteByKey", model, CommandType.StoredProcedure);;
		}
		
		public virtual sysdiagrams sysdiagramsGetByKey(sysdiagrams_Key model)
		{
			return _DBHandler.ExecuteQuery<sysdiagrams>("_sysdiagramsGetByKey", model, CommandType.StoredProcedure).FirstOrDefault();;
		}
		
		public virtual IList<sysdiagrams> sysdiagramsGetAll()
		{
			return _DBHandler.ExecuteQuery<sysdiagrams>("_sysdiagramsGetAll", CommandType.StoredProcedure);;
		}
		
		public virtual void sysdiagramsUDTTInsert(IList<sysdiagrams> models)
		{
			_DBHandler.ExecuteNonQuery("_sysdiagrams_UDTT_Insert", new { sysdiagrams = models.ToDataTable() }, CommandType.StoredProcedure);;
		}
		
		public virtual void sysdiagramsUDTTUpdate(IList<sysdiagrams> models)
		{
			_DBHandler.ExecuteNonQuery("_sysdiagrams_UDTT_Update", new { sysdiagrams = models.ToDataTable() }, CommandType.StoredProcedure);;
		}
		
		partial void Initialize();
	}
}

