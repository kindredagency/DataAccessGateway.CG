//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.DataAccessGateway.Automation.DAGUnitTest
{
	using System;
	using System.Data;
	using System.Linq;
	using System.Collections.Generic;
	using Framework.DataAccessGateway.Core;
	using Framework.AssetLibrary.Types;
	
	
	public partial interface IData_Repository
	{
		
		void DataInsert(Data model);
		
		void DataUpdate(Data_Ext model);
		
		void DataDeleteByKey(Data_Key model);
		
		Data DataGetByKey(Data_Key model);
		
		IList<Data> DataGetAll();
		
		void DataUDTTInsert(IList<Data> models);
		
		void DataUDTTUpdate(IList<Data> models);
	}
	
	internal partial class Data_Repository : IData_Repository
	{
		
		private Framework.DataAccessGateway.Core.IDBHandler _DBHandler { get; }
		
		public Data_Repository(Framework.DataAccessGateway.Core.IDBHandler dbHandler)
		{
			_DBHandler = dbHandler;
			Initialize();
		}
		
		public virtual void DataInsert(Data model)
		{
			_DBHandler.ExecuteNonQuery("_DataInsert", model, CommandType.StoredProcedure);;
		}
		
		public virtual void DataUpdate(Data_Ext model)
		{
			_DBHandler.ExecuteNonQuery("_DataUpdate", model, CommandType.StoredProcedure);;
		}
		
		public virtual void DataDeleteByKey(Data_Key model)
		{
			_DBHandler.ExecuteNonQuery("_DataDeleteByKey", model, CommandType.StoredProcedure);;
		}
		
		public virtual Data DataGetByKey(Data_Key model)
		{
			return _DBHandler.ExecuteQuery<Data>("_DataGetByKey", model, CommandType.StoredProcedure).FirstOrDefault();;
		}
		
		public virtual IList<Data> DataGetAll()
		{
			return _DBHandler.ExecuteQuery<Data>("_DataGetAll", CommandType.StoredProcedure);;
		}
		
		public virtual void DataUDTTInsert(IList<Data> models)
		{
			_DBHandler.ExecuteNonQuery("_Data_UDTT_Insert", new { Data = models.ToDataTable() }, CommandType.StoredProcedure);;
		}
		
		public virtual void DataUDTTUpdate(IList<Data> models)
		{
			_DBHandler.ExecuteNonQuery("_Data_UDTT_Update", new { Data = models.ToDataTable() }, CommandType.StoredProcedure);;
		}
		
		partial void Initialize();
	}
}

