<#@ template hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#@include file="TTFileManager.ttinclude"#>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.data.dll" #>
<#@ assembly name="$(ProjectDir)\bin\$(Configuration)\Framework.DataAccessGateway.Core.dll" #>
<#@ assembly name="$(ProjectDir)\bin\$(Configuration)\Framework.DataAccessGateway.Schema.dll" #>
<#@ assembly name="$(ProjectDir)\bin\$(Configuration)\Framework.DataAccessGateway.CG.dll" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="Framework.DataAccessGateway.Core" #>
<#@ import namespace="Framework.DataAccessGateway.Schema" #>
<#@ import namespace="Framework.DataAccessGateway.CG" #>
<#@ import namespace="Framework.DataAccessGateway.CG.Models" #>

<#
	IServiceProvider serviceProvider = (IServiceProvider)this.Host;
	DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE; 

	var manager = Manager.Create(Host, GenerationEnvironment);	
		
	var configFile = new ExeConfigurationFileMap();
	configFile.ExeConfigFilename = Host.ResolvePath("cg.config");;
				
	var configuration = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);	
			
	var appSettings = configuration.GetSection("cg.appSettings") as AppSettingsSection;

	List<string> omittedTables = new List<string>();	

	foreach(var omittedTable in appSettings.Settings["OmittedTables"].Value.Split(','))
	{
		omittedTables.Add(omittedTable);
	}

	Settings.OmittedTables = omittedTables.ToArray();

	List<string> includedTables = new List<string>();

	foreach(var includedTable in appSettings.Settings["IncludedTables"].Value.Split(','))
	{
		includedTables.Add(includedTable);
	}

	Settings.IncludedTables = includedTables.ToArray();

	var connectionString = appSettings.Settings["DBConnection"].Value;

	SqlConnectionStringBuilder builder =  new SqlConnectionStringBuilder(connectionString);

	if((builder.DataSource != "") && (builder.InitialCatalog != ""))
	{
		var code = new CodeFactory(connectionString, Framework.DataAccessGateway.Core.DBHandlerType.DbHandlerMSSQL);

		Settings.DatabaseNamespace = dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject.Name + "." + builder.InitialCatalog;

		var context = code.Context("DBContext");
						
		manager.StartNewFile("_" + context.Name + ".cs");

		WriteLine(context.CSharpCode);	

		manager.EndBlock();			
	}				

	manager.Process(true);
#>
